<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: paladin | otto destrukt]]></title>
  <link href="http://blog.ottodestrukt.org/blog/categories/paladin/atom.xml" rel="self"/>
  <link href="http://blog.ottodestrukt.org/"/>
  <updated>2012-01-03T11:55:38-05:00</updated>
  <id>http://blog.ottodestrukt.org/</id>
  <author>
    <name><![CDATA[Alan Kligman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[data-driven game update loop]]></title>
    <link href="http://blog.ottodestrukt.org/blog/2011/12/14/data-driven-game-update-loop/"/>
    <updated>2011-12-14T19:16:00-05:00</updated>
    <id>http://blog.ottodestrukt.org/blog/2011/12/14/data-driven-game-update-loop</id>
    <content type="html"><![CDATA[<p>I've been refactoring the scheduler again to make it more data-driven. The previous incarnation provided priority-based scheduling, but that leaves it to the game developer to make sure that task priorities are correct, even for tasks that she didn't write herself. The first change I made was to add scheduler phases. Right now there are three, named <em>Input</em>, <em>Update</em> and <em>Render</em>. The input and render phases shouldn't result in any changes to game simulation state.</p>

<!-- more -->


<p><img class="center" src="/images/gladius-update-loop.svg" width="300" height="400" title="engine update loop" alt="[ image: engine update loop ]"></p>

<p>The second change I made was to add task groups to help capture different stages in each phase. For example, there are default groups for <em>Physics</em>, <em>Animation</em> and <em>Logic</em>, as well as others. A new task can specify a list of groups as dependencies during creation, and the scheduler will make sure that the new task runs only after each of its dependencies has finished. Creating a new task looks like this:</p>

<pre><code>var t = new engine.scheduler.Task({
    schedule: {
        phase: 'Update',
        depends: ['Physics'],
        interval: 100
    },
    group: 'Animation',
    callback: function() {
        ...
    }
});
</code></pre>

<p>This creates an Animation task that is scheduled after all Physics tasks, and runs every 100 ms in the Update phase. Because this task is in the Animation group, any other tasks that depend on Animation will be scheduled to run after this task. This is much cooler than a hard-coded game update loop because it's not necessary to modify engine code to add new services to your game, only the schedule you pass in when you create your task.</p>

<p>(Thanks <a href="https://twitter.com/#!/secretrobotron">@secretrobotron</a> for the pretty image!)</p>
]]></content>
  </entry>
  
</feed>
